Final Project
Course: CS441 Fall 2016 UK CS JWJ
Date: 12/12/2016
Submitted by: 
Matthew Turner 910878862
Mazin Zakaria 910949827

This submission includes the project developed by the team for Milestones C and D:

The objective of the project: take in a cmm program file and then generate an apm file,
which can be executed with P-stack machine (pstack/api).i

Synopsis: ./cmm2pstack < file.cmm > calc_out.apm
Once the apm file is generated, execute  it with
./pstack/api <file name>
or
./pstack/api <file name> -d (debug option)


Files:
    Makefile.codegen -> Makefile used by the program
    cmm.cf -> Grammar of the cmm language used by the program for bnfc. 
    
    Absyn.H -> Absyn files generated by bnfc
    Absyn.C

    cmm.l -> Flex and Bison files generated by bnfc
    cmm.y

    codegen.cc -> code that generated P-code instructions. 
    codegen.h -> header, also developed for the project

    Lexer.C -> Lexer files generated by bnfc
    Lexer.H

    Parser.C -> Parser files generated by bnfc
    Parser.H

    Printer.C -> Printer files generated by bnfc
    Printer.H

    pstcode.cc -> Code that implements getnum() and other functions. 
    pstcode.h

     -> Test script that runs tests (place in myTests to run)
    
    Skeleton.C -> Skeleton files generated by bnfc
    Skeleton.H

    symbtable.cc -> Symbtable used in project
    symbtable.h
    
    typescript -> Script of running the tests

    myTests/ -> directory containing tests 
    pstack/ -> directory containing pstack supplied by the instructor

    
STATUS OF THE PROJECT: (mark with completed/partial/not implemented)

status    feature
--------------------------------
        if-then and if-then-else (completed)
        for loops (2 part) (completed)
        for loops (2 part) (completed)
        Optimization of Swaps (completed)
        globals (completed)
    repeat-until (do-while) (completed)
        for loop (scoped version) (completed)
        Check argument counts for functions (completed)
        doubles (not completed)
        type-checking (not completed)
        
        
DEVELOPERS'S NOTES:
In designing our implementations for this project, our first goal was code consistency.  That is, we did the best that we could to keep
our code in similar style with the code that was provided for this assignment.  As such, most of our design decisions came with this
as a leading, or in some cases, the only factor when approaching the problem.  This served to both keep code simple to view and consist-
ent across the project as well as guaranteeing that our code does not add any new dependencies.  We also found this to make for the
most straightforward implementations for these new functions.
                
 
EXTRAS: N/A

LIMITATIONS AND KNOWN BUGS: Does not handle doubles or have additional features beyond that of task 9 as defines by "stages.pdf" provided 
by Professor Jaromczyk.

TESTS: <please deliver on the expectations listed below>
    Include in myTests directory: one group of tests for each feature.
    For each goal in the project, include two tests: basic and advanced.
    Additionally, include test programs that are incorrect cmm, to demonstrate how errors are reported.
    Add one larger and more realistic cmm program.

Note: The tests are run through script included in the handout.
Synopsis for testing cmm files in TESTS: test-cmm2pstack-modified.sh myTESTS
Note that this script requires additional files for each program: listing the expected results, and possible
messages from the compiler (see TESTS).
